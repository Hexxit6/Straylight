<div class="container">
    <div class="row my-4">
        <div class="col-12">
            <div class="dropdown mt-2 me-2">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton2"
                        data-bs-toggle="dropdown" aria-expanded="false">
                    AQI (US)
                </button>
                <ul class="dropdown-menu">
                    <li class="dropdown-item" onclick="changeDropdown2('AQI')" value="aqi">AQI (US)</li>
                    <li class="dropdown-item" onclick="changeDropdown2('PM2_5')" value="pm25">PM2.5</li>
                    <li class="dropdown-item" onclick="changeDropdown2('PM10')" value="pm10">PM10</li>
                    <li class="dropdown-item" onclick="changeDropdown2('NO2')" value="no2">NO2</li>
                    <li class="dropdown-item" onclick="changeDropdown2('Grasses')" value="poac">Grasses</li>
                    <li class="dropdown-item" onclick="changeDropdown2('Birch')" value="betu">Birch</li>
                    <li class="dropdown-item" onclick="changeDropdown2('Alder')" value="alnu">Alder</li>
                    <li class="dropdown-item" onclick="changeDropdown2('Ragweed')" value="ambr">Ragweed</li>
                    <li class="dropdown-item" onclick="changeDropdown2('Mugwort')" value="arte">Mugwort</li>
                    <li class="dropdown-item" onclick="changeDropdown2('OliveTree')" value="olea">Olive Tree</li>
                </ul>
            </div>
        </div>

        <div class="barplot col-12"></div>
    </div>
</div>

<style>

    svg {
        font: 10px sans-serif;
    }


    .bar {
        fill: steelblue;
        clip-path: url(#clip);
    }

    .subBar {
        fill: gray;
        opacity: 0.5;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .brush .extent {
        stroke: #fff;
        fill: steelblue;
        fill-opacity: .25;
        shape-rendering: crispEdges;
    }

    rect.mover {
        stroke: red;
        stroke-opacity: .1;
        fill: lightSteelBlue;
        fill-opacity: .5;
    }
</style>

<script>

    let s_data =[];
    let selected_dropdown = "AQI";
    function formatData(data, item) {

        let temp_data = [];

        var key_1 = "pollutants";
        if( item in data[0][key_1]) {
            key_1 = "pollutants";
        } else {
            key_1 = "allergens";
        }

        for (let i = 0; i < data.length; i++) {
            temp_data.push({
                date: data[i].date,
                value: data[i][key_1][item]
            });
        }
        update(temp_data);
    }

    $.ajax({
        method: "GET",
        url: "/data/all/{{station.address}}",
    })
    .done(function (data) {
        s_data = data;
        formatData(s_data, selected_dropdown);
    });

    function changeDropdown2(item) {
        $('#dropdownMenuButton2').text(item);
        selected_dropdown = item;
        formatData(s_data, selected_dropdown);
    }


    function update(data) {

        $(".barplot").html("");

        var margin = {top: 20, right: 10, bottom: 20, left: 40};
        var marginOverview = {top: 30, right: 10, bottom: 20, left: 40};
        var selectorHeight = 40;
        var width = 1140 - margin.left - margin.right;
        var height = 400 - margin.top - margin.bottom - selectorHeight;
        var heightOverview = 80 - marginOverview.top - marginOverview.bottom;

        var maxLength = d3.max(data.map(function (d) {
            return new Date(d.date).toLocaleString().length
        }))
        var barWidth = maxLength * 5;
        var numBars = Math.round(width / barWidth);
        var isScrollDisplayed = barWidth * data.length > width;


        console.log(isScrollDisplayed)

        var xscale = d3.scale.ordinal()
                .domain(data.slice(0, numBars).map(function (d) {
                    return new Date(d.date).toLocaleString();
                }))
                .rangeBands([0, width], .2);

        var yscale = d3.scale.linear()
                .domain([0, Math.max(...data.map(e => e.value))])
                .range([height, 0]);

        var xAxis = d3.svg.axis().scale(xscale).orient("bottom");
        var yAxis = d3.svg.axis().scale(yscale).orient("left");

        var svg = d3.select(".barplot").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom + selectorHeight);

        var diagram = svg.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        diagram.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0, " + height + ")")
                .call(xAxis);

        diagram.append("g")
                .attr("class", "y axis")
                .call(yAxis);

        var bars = diagram.append("g");

        bars.selectAll("rect")
                .data(data.slice(0, numBars), function (d) {
                    return new Date(d.date).toLocaleString();
                })
                .enter().append("rect")
                .attr("class", "bar")
                .attr("x", function (d) {
                    return xscale(new Date(d.date).toLocaleString());
                })
                .attr("y", function (d) {
                    return yscale(d.value);
                })
                .attr("width", xscale.rangeBand())
                .attr("height", function (d) {
                    return height - yscale(d.value);
                });


        if (isScrollDisplayed) {
            var xOverview = d3.scale.ordinal()
                    .domain(data.map(function (d) {
                        return new Date(d.date).toLocaleString();
                    }))
                    .rangeBands([0, width], .2);
            yOverview = d3.scale.linear().range([heightOverview, 0]);
            yOverview.domain(yscale.domain());

            var subBars = diagram.selectAll('.subBar')
                    .data(data)

            subBars.enter().append("rect")
                    .classed('subBar', true)
                    .attr({
                        height: function (d) {
                            return heightOverview - yOverview(d.value);
                        },
                        width: function (d) {
                            return xOverview.rangeBand()
                        },
                        x: function (d) {

                            return xOverview(new Date(d.date).toLocaleString());
                        },
                        y: function (d) {
                            return height + heightOverview + yOverview(d.value)
                        }
                    })

            var displayed = d3.scale.quantize()
                    .domain([0, width])
                    .range(d3.range(data.length));

            diagram.append("rect")
                    .attr("transform", "translate(0, " + (height + margin.bottom) + ")")
                    .attr("class", "mover")
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("height", selectorHeight)
                    .attr("width", Math.round(parseFloat(numBars * width) / data.length))
                    .attr("pointer-events", "all")
                    .attr("cursor", "ew-resize")
                    .call(d3.behavior.drag().on("drag", display));
        }

        function display() {
            var x = parseInt(d3.select(this).attr("x")),
                    nx = x + d3.event.dx,
                    w = parseInt(d3.select(this).attr("width")),
                    f, nf, new_data, rects;

            if (nx < 0 || nx + w > width) return;

            d3.select(this).attr("x", nx);

            f = displayed(x);
            nf = displayed(nx);

            if (f === nf) return;

            new_data = data.slice(nf, nf + numBars);

            xscale.domain(new_data.map(function (d) {
                return new Date(d.date).toLocaleString();
            }));
            diagram.select(".x.axis").call(xAxis);

            rects = bars.selectAll("rect")
                    .data(new_data, function (d) {
                        return new Date(d.date).toLocaleString();
                    });

            rects.attr("x", function (d) {
                return xscale(new Date(d.date).toLocaleString());
            });

// 	  rects.attr("transform", function(d) { return "translate(" + xscale(new Date(d.date).toLocaleString()) + ",0)"; })

            rects.enter().append("rect")
                    .attr("class", "bar")
                    .attr("x", function (d) {
                        return xscale(new Date(d.date).toLocaleString());
                    })
                    .attr("y", function (d) {
                        return yscale(d.value);
                    })
                    .attr("width", xscale.rangeBand())
                    .attr("height", function (d) {
                        return height - yscale(d.value);
                    });

            rects.exit().remove();
        };

    }


</script>